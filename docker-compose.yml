version: "3"

services:
  backend:
    container_name: "backend"
    build:
      context: backend
      dockerfile: Dockerfile
    env_file: .env
    restart: always
    ports:
      - "3000:3000"
    networks:
      - net
    depends_on:
      - postgres
    volumes:
      - ./backend/public/uploads:/app/public/uploads

  postgres:
    container_name: "database"
    image: postgres:16
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - net

  frontend:
    container_name: "frontend"
    build:
      context: frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5173:3000
    networks:
      - net
    depends_on:
      - backend
  systeminfoservice:
    container_name: "systeminfoservice"
    restart: always
    build:
      context: systemInfoService
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    networks:
      - net
    depends_on:
      - frontend
  emailservice:
    container_name: "emailservice"
    restart: always
    build:
      context: emailService
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3001:3000"
    networks:
      - net
    depends_on:
      - backend
    volumes:
      - ./logs/mail_service:/app/logs

  tgbotservice:
    container_name: "tgbotservice"
    restart: always
    build:
      context: tgBot
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3002:3000"
    networks:
      - net
    volumes:
      - ./logs/tgBot_service:/app/logs

  nginx:
    restart: always
    build:
      context: nginx
    ports:
      - "80:80"
      - "443:443"
    entrypoint: /bin/sh
    command: -c 'while :; do sleep 6h && wait $${!}; nginx -s reload; done & /docker-entrypoint.sh nginx -g "daemon off;error_log /dev/stdout debug;"'
    volumes:
      - ./ssl:/etc/ssl
      - acme_challenge:/usr/share/nginx/html/.well-known
    environment:
   
      - DOMAIN=${DOMAIN}
    depends_on:
      - frontend
      - backend
      - certbot-init
    networks:
      - net
      
  certbot-init:
    image: certbot/certbot
    entrypoint: /bin/sh
    command: >-
      -c 'test -d /etc/letsencrypt/live/${DOMAIN} ||
      certbot certonly --webroot -w /usr/share/nginx/html -d ${DOMAIN}
      -m ${EMAIL_LOGIN} --agree-tos --force-renewal --noninteractive'
    ports:
      - 80:80
    volumes:
      - ./ssl:/etc/letsencrypt
      - acme_challenge:/usr/share/nginx/html/.well-known

  certbot:
    image: certbot/certbot
    entrypoint: /bin/sh
    command: -c 'trap exit TERM; while :; do certbot renew; sleep 24h && wait $${!}; done;'
    volumes:
      - ./ssl:/etc/ssl
      - acme_challenge:/usr/share/nginx/html/.well-known
    depends_on:
      nginx:
        condition: service_started
        required: true

networks:
  net:
    driver: bridge

volumes:
  postgres_data:
  acme_challenge:
